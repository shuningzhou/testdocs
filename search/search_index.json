{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"fixedmath/","text":"","title":"Fixedmath"},{"location":"framesync/","text":"","title":"Framesync"},{"location":"physics/","text":"","title":"Physics"},{"location":"welcome/","text":"Welcome to FrameSync \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to FrameSync"},{"location":"welcome/#welcome-to-framesync","text":"For full documentation visit mkdocs.org .","title":"Welcome to FrameSync"},{"location":"welcome/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"welcome/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"frameSync/importantClass/frameSyncAgent/","text":"FrameSyncAgent \u00b6 Your code interacts with the FrameSyncEngine and the FrameSyncGame by implementing a class derives from the build-in class called FrameSyncAgent . The FrameSyncAgent class is derived from the Unity MonoBehaviour class, and it creates a FrameSyncEngine and a FrameSyncGame in its Awake() method. Example contents of a FrameSyncAgent subclass: C# using UnityEngine ; using SWNetwork.FrameSync ; public class MyFrameSyncAgent : FrameSyncAgent { public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { } public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { } public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { } } Events \u00b6 The FrameSyncAgent class provides a collection of useful events which allows you to customize the FrameSync build-in classes for your game. OnFrameSyncEngineCreated \u00b6 Called after the FrameSyncAgent created its FrameSyncEngine in the Awake() method. OnFrameSyncGameCreated \u00b6 Called after the FrameSyncAgent created its FrameSyncGame in the Awake() method. OnCollectLocalPlayerInputs \u00b6 Called every frame to collect the inputs of the local player.","title":"FrameSyncAgent"},{"location":"frameSync/importantClass/frameSyncAgent/#framesyncagent","text":"Your code interacts with the FrameSyncEngine and the FrameSyncGame by implementing a class derives from the build-in class called FrameSyncAgent . The FrameSyncAgent class is derived from the Unity MonoBehaviour class, and it creates a FrameSyncEngine and a FrameSyncGame in its Awake() method. Example contents of a FrameSyncAgent subclass: C# using UnityEngine ; using SWNetwork.FrameSync ; public class MyFrameSyncAgent : FrameSyncAgent { public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { } public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { } public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { } }","title":"FrameSyncAgent"},{"location":"frameSync/importantClass/frameSyncAgent/#events","text":"The FrameSyncAgent class provides a collection of useful events which allows you to customize the FrameSync build-in classes for your game.","title":"Events"},{"location":"frameSync/importantClass/frameSyncAgent/#onframesyncenginecreated","text":"Called after the FrameSyncAgent created its FrameSyncEngine in the Awake() method.","title":"OnFrameSyncEngineCreated"},{"location":"frameSync/importantClass/frameSyncAgent/#onframesyncgamecreated","text":"Called after the FrameSyncAgent created its FrameSyncGame in the Awake() method.","title":"OnFrameSyncGameCreated"},{"location":"frameSync/importantClass/frameSyncAgent/#oncollectlocalplayerinputs","text":"Called every frame to collect the inputs of the local player.","title":"OnCollectLocalPlayerInputs"},{"location":"home/installation/","text":"Welcome to FrameSync \u00b6 Installation \u00b6","title":"Installation"},{"location":"home/installation/#welcome-to-framesync","text":"","title":"Welcome to FrameSync"},{"location":"home/installation/#installation","text":"","title":"Installation"},{"location":"tutorial/pong/collectInput/","text":"Collecting Player Inputs \u00b6 OnCollectLocalPlayerInputs Called every frame to collect the inputs of the local player. In OnCollectLocalPlayerInputs , you read player inputs from the Unity Input class and pass it to FrameSyncInput . Go to ProjectSettings->Input manager and add a new input Vertical1 . You can Right-Click the input Vertical and Duplicate Array Element to copy the input settings. Set Negative Button to down and Positive Button to up for the new input. C# public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { // 1 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical\" ), player1 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . G ), player1 ); // 2 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical1\" ), player2 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . H ), player2 ); } In // 1 , player1 uses w and s to move and uses g to trigger the ready input. In // 2 , player2 uses up arrow and down arrow to move and uses h to trigger the ready input.","title":"Collecting Player Inputs"},{"location":"tutorial/pong/collectInput/#collecting-player-inputs","text":"OnCollectLocalPlayerInputs Called every frame to collect the inputs of the local player. In OnCollectLocalPlayerInputs , you read player inputs from the Unity Input class and pass it to FrameSyncInput . Go to ProjectSettings->Input manager and add a new input Vertical1 . You can Right-Click the input Vertical and Duplicate Array Element to copy the input settings. Set Negative Button to down and Positive Button to up for the new input. C# public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { // 1 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical\" ), player1 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . G ), player1 ); // 2 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical1\" ), player2 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . H ), player2 ); } In // 1 , player1 uses w and s to move and uses g to trigger the ready input. In // 2 , player2 uses up arrow and down arrow to move and uses h to trigger the ready input.","title":"Collecting Player Inputs"},{"location":"tutorial/pong/completeOfflineAgent/","text":"Complete Offline FrameSyncAgent \u00b6 The MyFrameSyncAgent.cs script should look like. C# using UnityEngine ; using SWNetwork.FrameSync ; using Parallel ; public class MyGameSettings { public byte player1ID ; public byte player2ID ; } public class MyFrameSyncAgent : FrameSyncAgent { public SWFrameSyncPlayer player1 ; public SWFrameSyncPlayer player2 ; public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { // 1 SWFrameSyncInputSetting [] inputSettings = new SWFrameSyncInputSetting [ 2 ]; inputSettings [ 0 ] = SWFrameSyncInputSetting . CompressedFloatInput ( \"y\" , Fix64 . FromDivision (- 1 , 1 ), Fix64 . FromDivision ( 1 , 1 ), Fix64 . FromDivision ( 1 , 10 ), Fix64 . zero ); inputSettings [ 1 ] = SWFrameSyncInputSetting . TriggerInput ( \"ready\" ); SWFrameSyncInputConfig inputConfig = new SWFrameSyncInputConfig ( inputSettings ); engine . SetFrameSyncInputConfig ( inputConfig ); } public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { // 1 game . type = SWFrameSyncGameType . Offline ; // 2 player1 = game . CreateOfflineGamePlayer (); player2 = game . CreateOfflineGamePlayer (); // 3 MyGameSettings gameSettings = new MyGameSettings (); gameSettings . player1ID = player1 . PlayerID ; gameSettings . player2ID = player2 . PlayerID ; // 4 game . userData = gameSettings ; } public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { // 1 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical\" ), player1 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . G ), player1 ); // 2 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical1\" ), player2 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . H ), player2 ); } }","title":"Complete Offline FrameSyncAgent"},{"location":"tutorial/pong/completeOfflineAgent/#complete-offline-framesyncagent","text":"The MyFrameSyncAgent.cs script should look like. C# using UnityEngine ; using SWNetwork.FrameSync ; using Parallel ; public class MyGameSettings { public byte player1ID ; public byte player2ID ; } public class MyFrameSyncAgent : FrameSyncAgent { public SWFrameSyncPlayer player1 ; public SWFrameSyncPlayer player2 ; public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { // 1 SWFrameSyncInputSetting [] inputSettings = new SWFrameSyncInputSetting [ 2 ]; inputSettings [ 0 ] = SWFrameSyncInputSetting . CompressedFloatInput ( \"y\" , Fix64 . FromDivision (- 1 , 1 ), Fix64 . FromDivision ( 1 , 1 ), Fix64 . FromDivision ( 1 , 10 ), Fix64 . zero ); inputSettings [ 1 ] = SWFrameSyncInputSetting . TriggerInput ( \"ready\" ); SWFrameSyncInputConfig inputConfig = new SWFrameSyncInputConfig ( inputSettings ); engine . SetFrameSyncInputConfig ( inputConfig ); } public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { // 1 game . type = SWFrameSyncGameType . Offline ; // 2 player1 = game . CreateOfflineGamePlayer (); player2 = game . CreateOfflineGamePlayer (); // 3 MyGameSettings gameSettings = new MyGameSettings (); gameSettings . player1ID = player1 . PlayerID ; gameSettings . player2ID = player2 . PlayerID ; // 4 game . userData = gameSettings ; } public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { // 1 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical\" ), player1 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . G ), player1 ); // 2 input . SetFloatForPlayer ( \"y\" , ( Fix64 ) Input . GetAxis ( \"Vertical1\" ), player2 ); input . SetTriggerForPlayer ( \"ready\" , Input . GetKeyUp ( KeyCode . H ), player2 ); } }","title":"Complete Offline FrameSyncAgent"},{"location":"tutorial/pong/configEngine/","text":"Configuring the FrameSyncEngine \u00b6 OnFrameSyncEngineCreated(SWFrameSyncEngine engine) Called after the FrameSyncAgent created its FrameSyncEngine in the Awake() method. In OnFrameSyncEngineCreated , you tell the FrameSyncEngine what the inputs are used in your game. C# public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { // 1 SWFrameSyncInputSetting [] inputSettings = new SWFrameSyncInputSetting [ 2 ]; // 2 inputSettings [ 0 ] = SWFrameSyncInputSetting . CompressedFloatInput ( \"y\" , Fix64 . FromDivision (- 1 , 1 ), Fix64 . FromDivision ( 1 , 1 ), Fix64 . FromDivision ( 1 , 10 ), Fix64 . zero ); // 3 inputSettings [ 1 ] = SWFrameSyncInputSetting . TriggerInput ( \"ready\" ); // 4 SWFrameSyncInputConfig inputConfig = new SWFrameSyncInputConfig ( inputSettings ); engine . SetFrameSyncInputConfig ( inputConfig ); } In // 1 , you create an array of input settings, the game uses 2 inputs, so the array size is 2. In // 2 , the first input is a CompressedFloatInput . it contains the information of the vertical axes from the keyboard. you will feed player's input to it later when we implement the OnCollectLocalPlayerInputs method. In // 3 , the second input is a TriggerInput , players will trigger this input when they are ready to play the game. In // 4 , you use the input settings array to create an inputConfig and you pass it to the FrameSyncEngine using the SetFrameSyncInputConfig method.","title":"Configuring FrameSyncEngine"},{"location":"tutorial/pong/configEngine/#configuring-the-framesyncengine","text":"OnFrameSyncEngineCreated(SWFrameSyncEngine engine) Called after the FrameSyncAgent created its FrameSyncEngine in the Awake() method. In OnFrameSyncEngineCreated , you tell the FrameSyncEngine what the inputs are used in your game. C# public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { // 1 SWFrameSyncInputSetting [] inputSettings = new SWFrameSyncInputSetting [ 2 ]; // 2 inputSettings [ 0 ] = SWFrameSyncInputSetting . CompressedFloatInput ( \"y\" , Fix64 . FromDivision (- 1 , 1 ), Fix64 . FromDivision ( 1 , 1 ), Fix64 . FromDivision ( 1 , 10 ), Fix64 . zero ); // 3 inputSettings [ 1 ] = SWFrameSyncInputSetting . TriggerInput ( \"ready\" ); // 4 SWFrameSyncInputConfig inputConfig = new SWFrameSyncInputConfig ( inputSettings ); engine . SetFrameSyncInputConfig ( inputConfig ); } In // 1 , you create an array of input settings, the game uses 2 inputs, so the array size is 2. In // 2 , the first input is a CompressedFloatInput . it contains the information of the vertical axes from the keyboard. you will feed player's input to it later when we implement the OnCollectLocalPlayerInputs method. In // 3 , the second input is a TriggerInput , players will trigger this input when they are ready to play the game. In // 4 , you use the input settings array to create an inputConfig and you pass it to the FrameSyncEngine using the SetFrameSyncInputConfig method.","title":"Configuring the FrameSyncEngine"},{"location":"tutorial/pong/configGame/","text":"Configuring the FrameSyncGame \u00b6 OnFrameSyncGameCreated Called after the FrameSyncAgent created its FrameSyncGame in the Awake() method. In OnFrameSyncGameCreated , you create the players and set the game custom data of your game. C# public class MyGameSettings { public byte player1ID ; public byte player2ID ; } You will use MyGameSettings as the custom data of your game. In online mode, game custom data is configured in the matchmaking stage before creating the FrameSyncAgent . For now, you will hardcode it to run the game offline. C# public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { // 1 game . type = SWFrameSyncGameType . Offline ; // 2 player1 = game . CreateOfflineGamePlayer (); player2 = game . CreateOfflineGamePlayer (); // 3 MyGameSettings gameSettings = new MyGameSettings (); gameSettings . player1ID = player1 . PlayerID ; gameSettings . player2ID = player2 . PlayerID ; // 4 game . userData = gameSettings ; } In // 1 , you set the game type to offline. In // 2 , you created two offline players. In // 3 , you created a MyGameSettings object and set its playerIDs to the offline players you just created in // 2 . In // 4 , you passed the MyGameSettings Object created in // 3 to the FrameSyncGame .","title":"Configuring FrameSyncGame"},{"location":"tutorial/pong/configGame/#configuring-the-framesyncgame","text":"OnFrameSyncGameCreated Called after the FrameSyncAgent created its FrameSyncGame in the Awake() method. In OnFrameSyncGameCreated , you create the players and set the game custom data of your game. C# public class MyGameSettings { public byte player1ID ; public byte player2ID ; } You will use MyGameSettings as the custom data of your game. In online mode, game custom data is configured in the matchmaking stage before creating the FrameSyncAgent . For now, you will hardcode it to run the game offline. C# public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { // 1 game . type = SWFrameSyncGameType . Offline ; // 2 player1 = game . CreateOfflineGamePlayer (); player2 = game . CreateOfflineGamePlayer (); // 3 MyGameSettings gameSettings = new MyGameSettings (); gameSettings . player1ID = player1 . PlayerID ; gameSettings . player2ID = player2 . PlayerID ; // 4 game . userData = gameSettings ; } In // 1 , you set the game type to offline. In // 2 , you created two offline players. In // 3 , you created a MyGameSettings object and set its playerIDs to the offline players you just created in // 2 . In // 4 , you passed the MyGameSettings Object created in // 3 to the FrameSyncGame .","title":"Configuring the FrameSyncGame"},{"location":"tutorial/pong/createAgent/","text":"Creating FrameSyncAgent \u00b6 For your first step, you will create an empty GameObject to house your customized FrameSyncAgent . MyFrameSyncAgent \u00b6 Next, create a new script MyFrameSyncAgent and attach it to the empty GameObject by selecting Add Componnet . Remove the Start() and Update() methods and add the following to the MyFrameSyncAgent script. C# using UnityEngine ; using SWNetwork.FrameSync ; using Parallel ; public class MyFrameSyncAgent : FrameSyncAgent { // offline players public SWFrameSyncPlayer player1 ; public SWFrameSyncPlayer player2 ; public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { } public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { } public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { } }","title":"Creating FrameSyncAgent"},{"location":"tutorial/pong/createAgent/#creating-framesyncagent","text":"For your first step, you will create an empty GameObject to house your customized FrameSyncAgent .","title":"Creating FrameSyncAgent"},{"location":"tutorial/pong/createAgent/#myframesyncagent","text":"Next, create a new script MyFrameSyncAgent and attach it to the empty GameObject by selecting Add Componnet . Remove the Start() and Update() methods and add the following to the MyFrameSyncAgent script. C# using UnityEngine ; using SWNetwork.FrameSync ; using Parallel ; public class MyFrameSyncAgent : FrameSyncAgent { // offline players public SWFrameSyncPlayer player1 ; public SWFrameSyncPlayer player2 ; public override void OnFrameSyncEngineCreated ( SWFrameSyncEngine engine ) { } public override void OnFrameSyncGameCreated ( SWFrameSyncGame game , SWFrameSyncReplay replay ) { } public override void OnCollectLocalPlayerInputs ( SWFrameSyncInput input , SWFrameSyncGame game ) { } }","title":"MyFrameSyncAgent"},{"location":"tutorial/pong/overview/","text":"","title":"Overview"}]}